(nalloc! top 124)
(alloc! _ 0)

;; Here, puts can recurse only to write 124 a's
;; because locals are kept in the zero-page, and there's only 128-ish of them
;;
;; 0x0 0x1 0x2 0x3 0x4 0x5 0x6 ... 0x100
;; \_/ \_____/ \_____/ \_____/     \_____
;; ptr  local1  local2  local3     rom code
;;
;; When a function is called, all arguments are moved from the stack to the "local stack"
;; It takes some prologue and epilogue code to do so, that's why most of the builtin funtions
;; are just macros (we don't want to call like 20 opcodes just to call deo! or something)

(define (puts ptr)
  (if (equ? (get8! ptr) 0)
      #t
      (begin
        (putchar (get8! ptr))
        (puts (+ ptr 1)))))

;; If we look at the decompiled code, we see that there's a lot of noise because of the locals
;; i'll need to figure out a faster & smarter way to use args inside a function.
;; This was just the easiest
;; This function won't cause a local overfow, because it's tail-recursive. Down under the decompilation dump you can see
;; an example of a function that *would* cause an overflow.

;; ( defun normal puts (ptr) )
;; ( label: puts )
;; ( allocate-local! ptr )
;; |022b   80 00       ( )
;; |022d   10          ( LDZ )
;; |022e   01          ( INC )
;; |022f   80 02       ( )
;; |0231   1a          ( MUL )
;; |0232   31          ( STZ2 )
;; |0233   80 00       ( )
;; |0235   10          ( LDZ )
;; |0236   01          ( INC )
;; |0237   80 00       ( )
;; |0239   11          ( STZ )
;; ( label: puts__skip-prologue )
;; ( if (equ? (get8! ptr) 0) )
;; ( _push! 0 )
;; |023a   80 00       ( )
;; |023c   80 00       ( )
;; ( _push! ptr )
;; |023e   80 00       ( )
;; |0240   10          ( LDZ )
;; |0241   80 00       ( )
;; |0243   19          ( SUB )
;; |0244   80 02       ( )
;; |0246   1a          ( MUL )
;; |0247   30          ( LDZ2 )
;; ( funcall! get8! )
;; ( _push! get8! )
;; |0248   80 01       ( )
;; |024a   80 49       ( )
;; |024c   2e          ( JSR2 )
;; ( funcall! equ? )
;; ( _push! equ? )
;; |024d   80 01       ( )
;; |024f   80 09       ( )
;; |0251   2e          ( JSR2 )
;; |0252   1d          ( ORA )
;; ( _push! @@gensym__2 )
;; |0253   80 02       ( )
;; |0255   80 94       ( )
;; |0257   2d          ( JCN2 )
;; ( _push! ptr )
;; |0258   80 00       ( )
;; |025a   10          ( LDZ )
;; |025b   80 00       ( )
;; |025d   19          ( SUB )
;; |025e   80 02       ( )
;; |0260   1a          ( MUL )
;; |0261   30          ( LDZ2 )
;; ( funcall! get8! )
;; ( _push! get8! )
;; |0262   80 01       ( )
;; |0264   80 49       ( )
;; |0266   2e          ( JSR2 )
;; |0267   03          ( NIP )
;; ( _push! 24 )
;; |0268   80 00       ( )
;; |026a   80 18       ( )
;; |026c   03          ( NIP )
;; |026d   17          ( DEO )
;; ( removed nigeb call )
;; ( _push! ptr )
;; |026e   80 00       ( )
;; |0270   10          ( LDZ )
;; |0271   80 00       ( )
;; |0273   19          ( SUB )
;; |0274   80 02       ( )
;; |0276   1a          ( MUL )
;; |0277   30          ( LDZ2 )
;; ( _push! 1 )
;; |0278   80 00       ( )
;; |027a   80 01       ( )
;; |027c   38          ( ADD2 )
;; ( removed nigeb call )
;; ( tailcall! puts )
;; |027d   80 00       ( )
;; |027f   10          ( LDZ )
;; |0280   80 02       ( )
;; |0282   1a          ( MUL )
;; |0283   b1          ( STZ2k )
;; |0284   03          ( NIP )
;; |0285   03          ( NIP )
;; |0286   80 02       ( )
;; |0288   19          ( SUB )
;; |0289   02          ( POP )
;; |028a   80 02       ( )
;; |028c   80 3a       ( )
;; |028e   2c          ( JMP2 )
;; ( removed nigeb call )
;; ( _push! @@gensym__1 )
;; |028f   80 02       ( )
;; |0291   80 98       ( )
;; |0293   2c          ( JMP2 )
;; ( label: @@gensym__2 )
;; ( _push! #true )
;; |0294   80 00       ( )
;; |0296   80 01       ( )
;; ( label: @@gensym__1 )
;; ( free-locals! 1 )
;; |0298   80 00       ( )
;; |029a   10          ( LDZ )
;; |029b   80 01       ( )
;; |029d   19          ( SUB )
;; |029e   80 00       ( )
;; |02a0   11          ( STZ )
;; |02a1   6c          ( JMP2r )

;; This would overflow
(define (puts-reverse ptr)
  (if (equ? (get8! ptr) 0)
      #t
      (begin
        (puts (+ ptr 1))
        (putchar (get8! ptr)))))

(define (main)
  (loopn (i 0 124 1)
    (set8! (+ top i) 97))
  (puts top)
  (exit 128))
